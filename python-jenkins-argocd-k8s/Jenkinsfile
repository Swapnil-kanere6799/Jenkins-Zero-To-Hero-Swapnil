pipeline {
    agent any 
    
    environment {
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Build Docker') {
            steps {
                script {
                    sh '''
                    echo 'Build Docker Image'
                    cd ./python-jenkins-argocd-k8s
                    pwd
                    docker build -t swapnil6799/task:${BUILD_NUMBER} .
                    docker images
                    ''' 
                }
            }
        }

        stage('Docker Login & Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-login', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                        echo "Logging in to Docker Registry"
                        echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin

                        echo 'Push Docker Image'
                        docker push swapnil6799/task:${BUILD_NUMBER}
                        '''
                    }
                }
            }
        }

        stage('SSH into Instance & Run Container') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'ssh-key', keyFileVariable: 'SSH_KEY_FILE')]) {
                        sh """
                        echo 'Connecting to Instance and Running Container'
                        ok=$(chmod 600 $SSH_KEY_FILE)
                        ssh -i $ok -o StrictHostKeyChecking=no ec2-user@3.111.171.6 << 'EOF'

                        echo "Pulling Docker Image"
                        docker pull swapnil6799/task:${BUILD_NUMBER}


                        echo "Running Docker Container"
                        docker run -d --name task-container swapnil6799/task:${BUILD_NUMBER}

                        echo "Docker Container is running on the EC2 instance"
                        EOF
                        """
                    }
                }
            }
        }
    }
}
