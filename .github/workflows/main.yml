name: eventstore/Bulk-Account-Migration

run-name: eventstore/Bulk-Account-Migration-from-${{ inputs.SourceStackName }}-to-${{ inputs.DestinationStackName }}-${{ github.run_number }}

on:
  workflow_dispatch:
    inputs:
      RestartDestinationEventstore:
        type: choice
        description: Restart Destination Eventstore
        default: "False"
        options:
          - "True"
          - "False"

      JobIdentifier:
        type: string
        description: Job identifier
        required: true
        default: ""

      SourceStackName:
        type: string
        description: Name of the source stack
        required: true
        default: ""

      DestinationStackName:
        type: string
        description: Name of the destination stack
        required: true
        default: ""

      IssueId:
        type: string
        required: true
        description: Issue ID for this task

      TerminateSource:
        type: boolean
        default: false
        description: Terminate source stack

jobs:
  setup-job-environment:
    runs-on: ubuntu-latest
    steps:
      - name: Generate github token
        id: generate-github-token
        uses: tibdex/github-app-token@v1.8.0
        with:
          app_id: ${{ secrets.CLEVERTAP_SNE_BOT_ID }}
          private_key: ${{ secrets.CLEVERTAP_SNE_BOT_PRIVATE_ACCESS_KEY }}

      - name: Checkout Infra-Actions repo
        uses: actions/checkout@v3

      - name: Checkout Cloudformation repo
        uses: actions/checkout@v3
        with:
          repository: CleverTap-SNE/Cloudformation
          path: cloudformation
          token: ${{ steps.generate-github-token.outputs.token }}

      - name: Get stack prefix
        id: get-stack-prefix
        run: |
          set -euxo pipefail
          stack_prefix=$(echo "${{ inputs.SourceStackName }}" | cut -d '-' -f1)
          echo "STACK_PREFIX=${stack_prefix}" >> $GITHUB_OUTPUT

      - name: Get stack region
        id: get-stack-region
        run: |
          set -euxo pipefail
          region=$(./scripts/utils/get_stack_region.bash ${{ steps.get-stack-prefix.outputs.STACK_PREFIX }})
          echo "REGION=${region}" >> $GITHUB_OUTPUT

      - name: Get stack instance count of source
        id: get-source-stack-instance-count
        working-directory: cloudformation
        run: |
          set -euxo pipefail
          stack_prefix=${{ steps.get-stack-prefix.outputs.STACK_PREFIX }}
          instance_count=$(jq -r '.[] | select(.Name == "${{ inputs.SourceStackName }}") | .InstanceCount' eventstore/$stack_prefix/clusters.json)
          echo "SOURCE_INSTANCE_COUNT=$instance_count" >> $GITHUB_OUTPUT

      - name: Get source stack start ip
        id: get-source-stack-start-ip
        working-directory: cloudformation
        run: |
          set -euxo pipefail
          stack_prefix=${{ steps.get-stack-prefix.outputs.STACK_PREFIX }}
          start_ip=$(jq -r '.[] | select(.Name == "${{ inputs.SourceStackName }}") | .StartIp' eventstore/$stack_prefix/clusters.json)
          echo "SOURCE_START_IP=$start_ip" >> $GITHUB_OUTPUT

      - name: Get stack instance count of destination
        id: get-destination-stack-instance-count
        working-directory: cloudformation
        run: |
          set -euxo pipefail
          stack_prefix=${{ steps.get-stack-prefix.outputs.STACK_PREFIX }}
          instance_count=$(jq -r '.[] | select(.Name == "${{ inputs.DestinationStackName }}") | .InstanceCount' eventstore/$stack_prefix/clusters.json)
          echo "DESTINATION_INSTANCE_COUNT=$instance_count" >> $GITHUB_OUTPUT

      - name: Get destination stack start ip
        id: get-destination-stack-start-ip
        working-directory: cloudformation
        run: |
          set -euxo pipefail
          stack_prefix=${{ steps.get-stack-prefix.outputs.STACK_PREFIX }}
          start_ip=$(jq -r '.[] | select(.Name == "${{ inputs.DestinationStackName }}") | .StartIp' eventstore/$stack_prefix/clusters.json)
          echo "DESTINATION_START_IP=$start_ip" >> $GITHUB_OUTPUT

      - name: Get status of Sensu Agent
        id: get-status-of-sensu-agent
        working-directory: cloudformation
        run: |
          set -euxo pipefail
          stack_prefix=${{ steps.get-stack-prefix.outputs.STACK_PREFIX }}
          is_sensu_agent_enabled=$(jq -r '.[] | select(.Name == "${{ inputs.StackName }}") | .EnableSensuV3ClientEcsService' eventstore/$stack_prefix/clusters.json)
          if [ -z "$is_sensu_agent_enabled" ]; then
            is_sensu_agent_enabled=false
          fi
          echo "IS_SENSU_AGENT_ENABLED=$is_sensu_agent_enabled" >> $GITHUB_OUTPUT

      - name: Get SSM Document Names
        id: get-ssm-documents
        run: |
          set -euxo pipefail
          # Fetch all SSM document names
          documents=$(aws ssm list-documents --region ${{ steps.get-stack-region.outputs.REGION }} --query "DocumentIdentifiers[*].Name" --output json)
          document_name=$(echo "$documents" | jq -r '.[] | select(contains("Es-Sharded-Bulk-Account-Migrator-MoveShardedBulkAccountUsingS3StreamAutomation"))')    
          underscore_document_name=$(echo "$documents" | jq -r '.[] | select(contains("SsmDocument-MarkingBulkMultipleAccountWithUnderscoreEventstoreSsmDocument"))')
          echo "DOCUMENT_NAME=${document_name}" >> $GITHUB_OUTPUT
          echo "UNDERSCORE_DOCUMENT_NAME=${underscore_document_name}" >> $GITHUB_OUTPUT

      - name: Fetch Bucket Name
        id: fetch_bucket
        run: |
          set -euxo pipefail
          if ${{ steps.get-stack-prefix.outputs.STACK_PREFIX }} == sk1; then
            bucket_name="sk1-eventstore-eventstoreaccountmigrations3bucket-1nfyoh7zge59f"
          elif ${{ steps.get-stack-prefix.outputs.STACK_PREFIX }} == eu1; then
            bucket_name="eu1-eventstore-eventstoreaccountmigrations3bucket-ex2ynbd4nypf"
          elif ${{ steps.get-stack-prefix.outputs.STACK_PREFIX }} == in1; then
            bucket_name="in1-eventstore-eventstoreaccountmigrations3bucket-gks5cyhjg3og"
          elif ${{ steps.get-stack-prefix.outputs.STACK_PREFIX }} == mec1; then
            bucket_name="mec1-eventstore-eventstoreaccountmigrations3bucke-1tcwxog3vd7rw"
          elif ${{ steps.get-stack-prefix.outputs.STACK_PREFIX }} == sg1; then
            bucket_name="sg1-eventstore-eventstoreaccountmigrations3bucket-1agvn9i4qopu7"
          elif ${{ steps.get-stack-prefix.outputs.STACK_PREFIX }} == us1; then
            bucket_name="us1-eventstore-eventstoreaccountmigrations3bucket-1xjska3z6ow9x"
          else
            bucket_name="aps3-eventstore-eventstoreaccountmigrations3bucke-k7g4e8bkd6sl"
          fi
          echo "BUCKET_NAME=${bucket_name}" >> $GITHUB_OUTPUT        

    outputs:
      STACK_PREFIX: ${{ steps.get-stack-prefix.outputs.STACK_PREFIX }}
      REGION: ${{ steps.get-stack-region.outputs.REGION }}
      SOURCE_INSTANCE_COUNT: ${{ steps.get-source-stack-instance-count.outputs.SOURCE_INSTANCE_COUNT }}
      SOURCE_START_IP: ${{ steps.get-source-stack-start-ip.outputs.SOURCE_START_IP }}
      DESTINATION_INSTANCE_COUNT: ${{ steps.get-destination-stack-instance-count.outputs.DESTINATION_INSTANCE_COUNT }}
      DESTINATION_START_IP: ${{ steps.get-destination-stack-start-ip.outputs.DESTINATION_START_IP }}
      IS_SENSU_AGENT_ENABLED: ${{ steps.get-status-of-sensu-agent.outputs.IS_SENSU_AGENT_ENABLED }}
      DOCUMENT_NAME: ${{ steps.get-ssm-documents.outputs.DOCUMENT_NAME }}
      BUCKET_NAME: ${{ steps.fetch_bucket.outputs.BUCKET_NAME }}

  stop-source-and-destination-cluster:
    runs-on: ubuntu-latest
    needs:
      - setup-job-environment
    steps:
      - name: Checkout Infra-Actions repo
        uses: actions/checkout@v3

      - name: Install Python Requirements
        id: install-python-requirements
        run: |
          set -euxo pipefail
          python3 -m venv prod-venv
          source prod-venv/bin/activate
          pip3 install requests argparse boto3        

      - name: Silence sensu entity
        if: ${{ needs.setup-job-environment.outputs.IS_SENSU_AGENT_ENABLED == 'true' }}
        run: |
          set -euxo pipefail
          python3 ./scripts/sensu/silence_sensu.py --stack ${{ inputs.SourceStackName }} --duration 14400
          python3 ./scripts/sensu/silence_sensu.py --stack ${{ inputs.DestinationStackName }} --duration 14400
        env:
          SENSU_API_KEY: ${{ secrets.SENSU_API_KEY }}
          SENSU_CLOUDFLARE_ACCESS_CLIENT_ID: ${{ secrets.CLOUDFLARE_SERVICE_TOKEN_ID }}
          SENSU_CLOUDFLARE_ACCESS_CLIENT_SECRET: ${{ secrets.CLOUDFLARE_SERVICE_TOKEN_SECRET }}

      - name: stopping service of source and destination cluster
        uses: ./.github/actions/cloudformation-build-commit-and-deploy
        with:
          query: 'map(if .Name == "${{ inputs.SourceStackName }}" or .Name == "${{ inputs.DestinationStackName }}" then .StopServices = true | .StopNbService = true | .EnableRealtimeExportsService = false else . end)'
          issue_id: ${{ inputs.IssueId }}
          stack_name: ${{ inputs.SourceStackName }},${{ inputs.DestinationStackName }}
          component: 'eventstore'
          commit_message: 'eventstore: stopping services of stack ${{ inputs.SourceStackName }} and ${{ inputs.DestinationStackName }}'
          app_id: ${{ secrets.CLEVERTAP_SNE_BOT_ID }}
          private_key: ${{ secrets.CLEVERTAP_SNE_BOT_PRIVATE_ACCESS_KEY }}
          aws_cloudformation_service_iam_role: ${{ secrets.AWS_CLOUDFORMATION_SERVICE_IAM_ROLE }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  execute-bulk-account-migration-automation:
    runs-on: ubuntu-latest
    needs:
      - setup-job-environment
      - stop-source-and-destination-cluster
    steps:
      - name: Set Up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.setup-job-environment.outputs.REGION }}

      - name: Trigger Move Sharded Account Migration Automation SSm Document
        run: |
          ExecutionId=$(aws ssm start-automation-execution \
              --region ${{ needs.setup-job-environment.outputs.REGION }} \
              --document-name "${{ needs.setup-job-environment.outputs.DOCUMENT_NAME }}" \
              --parameters '{"restartDestinationEventstore":["${{ inputs.RestartDestinationEventstore }}"], "accountIdTxt":["account_ids.txt"], "SourceEventstoreStartInstanceIp":["${{ needs.setup-job-environment.outputs.SOURCE_START_IP }}"], "DestinationEventstoreStartInstanceIp":["${{ needs.setup-job-environment.outputs.DESTINATION_START_IP }}"], "DestinationStackName":["${{ inputs.DestinationStackName }}"], "NumberOfDestinationEventstoreInstances":["${{ needs.setup-job-environment.outputs.DESTINATION_INSTANCE_COUNT }}"], "JobIdentifier":["${{ inputs.JobIdentifier }}"], "SourceStackName":["${{ inputs.SourceStackName }}"], "NumberOfSourceEventstoreInstances":["${{ needs.setup-job-environment.outputs.SOURCE_INSTANCE_COUNT }}"]}' \
              --output text \
              --query "AutomationExecutionId")
          echo "Command Response: $ExecutionId"
          echo "SSM Run Command Link- https://${{ needs.setup-job-environment.outputs.REGION }}.console.aws.amazon.com/systems-manager/automation/execution/$ExecutionId?region=${{ needs.setup-job-environment.outputs.REGION }}"

  wait-for-migration-to-complete-and-approve-this:
    runs-on: ubuntu-latest
    needs:
      - setup-job-environment
      - stop-source-and-destination-cluster
      - execute-bulk-account-migration-automation
    environment: wait-for-approval
    steps:
      - name: Got approval hence proceeding further
        run: |
          set -euxo pipefail
          echo "Account Migration Completed"


  execute-mongo-entry-on-destination:
    runs-on: ${{ needs.setup-job-environment.outputs.STACK_PREFIX }}
    needs:
      - setup-job-environment
      - stop-source-and-destination-cluster
      - execute-bulk-account-migration-automation
      - wait-for-migration-to-complete-and-approve-this
    steps:
      - name: Generate github token
        id: generate-github-token
        uses: tibdex/github-app-token@v1.8.0
        with:
          app_id: ${{ secrets.CLEVERTAP_SNE_BOT_ID }}
          private_key: ${{ secrets.CLEVERTAP_SNE_BOT_PRIVATE_ACCESS_KEY }}

      - name: Checkout Infra-Actions repo
        uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Checkout Cloudformation repo
        id: checkout-cloudformation-repo
        uses: actions/checkout@v3
        with:
          repository: CleverTap-SNE/Cloudformation
          path: cloudformation
          token: ${{ steps.generate-github-token.outputs.token }}

      - name: Install Python Requirements
        run: |
          set -euxo pipefail
          python3 -m venv prod-venv
          source prod-venv/bin/activate
          pip3 install requests argparse boto3 pymongo==4.6.3 argparse

      - name: Set Up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.setup-job-environment.outputs.REGION }}

      - name: get primary host ip
        id: get-primary-host-ip
        run: |
          set -euxo pipefail
          source prod-venv/bin/activate
          mongo_cluster_hosts=$(jq -r '.[] | select(.Name == "${{ needs.setup-job-environment.outputs.STACK_PREFIX }}-Mongo-MetaData-1") .Instances[] | select(.EnableEc2instance == true and .StopServices == false) .PrivateIpAddress' cloudformation/mongo/${{ needs.setup-job-environment.outputs.STACK_PREFIX }}/clusters.json | tr '\n' ',' | sed 's/,$//')
          primary_host=$(python3 ./scripts/mongo/get_primary_host.py --mongo-hosts $mongo_cluster_hosts)
          echo "PRIMARY_HOSTS=${primary_host}" >> $GITHUB_OUTPUT
        env:
          MONGO_INFRA_USER: ${{ secrets.MONGO_INFRA_USER }}
          MONGO_INFRA_PASSWORD: ${{ secrets.MONGO_INFRA_PASSWORD }}

      - name: get cluster ids
        id: get-cluster-ids
        run: |
          set -euxo pipefail
          source prod-venv/bin/activate
          source_cluster_id=$(python3 ./scripts/eventstore/fetch-cluster-id.py --primary ${{ steps.get-primary-host-ip.outputs.PRIMARY_HOSTS }} --host ${{ inputs.SourceEventstoreStartInstanceIp }}:8080)
          destination_cluster_id=$(python3 ./scripts/eventstore/fetch-cluster-id.py --primary ${{ steps.get-primary-host-ip.outputs.PRIMARY_HOSTS }} --host ${{ inputs.DestinationEventstoreStartInstanceIp }}:8080)
          echo "SOURCE_CLUSTER_ID=${source_cluster_id}" >> $GITHUB_OUTPUT
          echo "DESTINATION_CLUSTER_ID=${destination_cluster_id}" >> $GITHUB_OUTPUT
        env:
          MONGO_INFRA_USER: ${{ secrets.MONGO_INFRA_USER }}
          MONGO_INFRA_PASSWORD: ${{ secrets.MONGO_INFRA_PASSWORD }}

      - name: Execute SSM Command for mongo entry on ${{ inputs.DestinationStackName }}
        run: |
          set -euxo pipefail
          source prod-venv/bin/activate
          python3 .scripts/eventstore/bulk-accounts-mongo-entry.py --mongo-primary-ip ${{ steps.get-primary-host-ip.outputs.PRIMARY_HOSTS }} --source-cluster-id ${{ steps.get-cluster-ids.outputs.SOURCE_CLUSTER_ID }} --destination-cluster-id ${{ steps.get-cluster-ids.outputs.DESTINATION_CLUSTER_ID }} --bucket-name ${{ needs.setup-job-environment.outputs.BUCKET_NAME }}
        env:
          MONGO_INFRA_USER: ${{ secrets.MONGO_INFRA_USER }}
          MONGO_INFRA_PASSWORD: ${{ secrets.MONGO_INFRA_PASSWORD }}

      - name: validate mongo entry
        run: |
          set -euxo pipefail
          source prod-venv/bin/activate
          current_entry=$(python3 ./scripts/eventstore/check-mongo-entry.py --primary ${{ steps.get-primary-host-ip.outputs.PRIMARY_HOSTS }} --bulk --bucket ${{ needs.setup-job-environment.outputs.BUCKET_NAME }}
          destination_cluster_id=${{ steps.get-cluster-ids.outputs.DESTINATION_CLUSTER_ID }}
          if [[ "$current_entry" == "$destination_cluster_id" ]]; then
              echo "Mongo entry successfully"
          else
              echo "Values do not match. Exiting..."
              exit 1
          fi
        env:
          MONGO_INFRA_USER: ${{ secrets.MONGO_INFRA_USER }}
          MONGO_INFRA_PASSWORD: ${{ secrets.MONGO_INFRA_PASSWORD }}

  start-source-and-destination-cluster:
    runs-on: ubuntu-latest
    needs:
      - setup-job-environment
      - stop-source-and-destination-cluster
      - execute-bulk-account-migration-automation
      - wait-for-migration-to-complete-and-approve-this
      - execute-mongo-entry-on-destination
    steps:
      - name: Checkout Infra-Actions repo
        uses: actions/checkout@v3

      - name: Install Python Requirements
        id: install-python-requirements
        run: |
          set -euxo pipefail
          python3 -m venv prod-venv
          source prod-venv/bin/activate
          pip3 install requests argparse boto3        

      - name: starting service of source and destination cluster
        uses: ./.github/actions/cloudformation-build-commit-and-deploy
        with:
          query: 'map(if .Name == "${{ inputs.SourceStackName }}" or .Name == "${{ inputs.DestinationStackName }}" then .StopServices = false | .StopNbService = false | .EnableRealtimeExportsService = true else . end)'
          issue_id: ${{ inputs.IssueId }}
          stack_name: ${{ inputs.SourceStackName }},${{ inputs.DestinationStackName }}
          component: 'eventstore'
          commit_message: 'eventstore: starting services of stack for ${{ inputs.SourceStackName }} and ${{ inputs.DestinationStackName }}'
          app_id: ${{ secrets.CLEVERTAP_SNE_BOT_ID }}
          private_key: ${{ secrets.CLEVERTAP_SNE_BOT_PRIVATE_ACCESS_KEY }}
          aws_cloudformation_service_iam_role: ${{ secrets.AWS_CLOUDFORMATION_SERVICE_IAM_ROLE }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Validate that checks associated with services are green in Sensu
        if: ${{ needs.setup-job-environment.outputs.IS_SENSU_AGENT_ENABLED == 'true' }}
        run: |
          set -euxo pipefail
          source prod-venv/bin/activate
          python3 ./scripts/sensu/wait_until_sensu_checks_are_green.py --subscription eventstore --checks eventstore-availability,eventstore_health_v2,nb-availability,realtimeexports-availability --stack ${{ inputs.SourceStackName }} --start-ip ${{ needs.setup-job-environment.outputs.SOURCE_START_IP }} --instance-count ${{ needs.setup-job-environment.outputs.SOURCE_INSTANCE_COUNT }}
          python3 ./scripts/sensu/wait_until_sensu_checks_are_green.py --subscription eventstore --checks eventstore-availability,eventstore_health_v2,nb-availability,realtimeexports-availability --stack ${{ inputs.DestinationStackName }} --start-ip ${{ needs.setup-job-environment.outputs.DESTINATION_START_IP }} --instance-count ${{ needs.setup-job-environment.outputs.DESTINATION_INSTANCE_COUNT }}
        env:
          SENSU_API_KEY: ${{ secrets.SENSU_API_KEY }}
          SENSU_CLOUDFLARE_ACCESS_CLIENT_ID: ${{ secrets.CLOUDFLARE_SERVICE_TOKEN_ID }}
          SENSU_CLOUDFLARE_ACCESS_CLIENT_SECRET: ${{ secrets.CLOUDFLARE_SERVICE_TOKEN_SECRET }}

      - name: Un-silence the instance in Sensu if its silenced
        if: ${{ needs.setup-job-environment.outputs.IS_SENSU_AGENT_ENABLED == 'true' && (inputs.StopServices == false && inputs.StopNotificationBackendService == false && inputs.StopRealtimeExportsService == false) }}
        run: |
          set -euxo pipefail
          source prod-venv/bin/activate
          python3 ./scripts/sensu/clear_silence.py --host ${{ needs.setup-job-environment.outputs.SOURCE_START_IP }} --count ${{ needs.setup-job-environment.outputs.SOURCE_INSTANCE_COUNT }}
          python3 ./scripts/sensu/clear_silence.py --host ${{ needs.setup-job-environment.outputs.DESTINATION_START_IP }} --count ${{ needs.setup-job-environment.outputs.DESTINATION_INSTANCE_COUNT }}
        env:
          SENSU_API_KEY: ${{ secrets.SENSU_API_KEY }}
          SENSU_CLOUDFLARE_ACCESS_CLIENT_ID: ${{ secrets.CLOUDFLARE_SERVICE_TOKEN_ID }}
          SENSU_CLOUDFLARE_ACCESS_CLIENT_SECRET: ${{ secrets.CLOUDFLARE_SERVICE_TOKEN_SECRET }}

  execute-post-account-migration-steps:
    runs-on: ubuntu-latest
    needs:
      - setup-job-environment
      - stop-source-and-destination-cluster
      - execute-bulk-account-migration-automation
      - wait-for-migration-to-complete-and-approve-this
      - execute-mongo-entry-on-destination
      - start-source-and-destination-cluster
    steps:
      - name: Install Python Requirements
        run: |
          set -euxo pipefail
          python3 -m venv prod-venv
          source prod-venv/bin/activate
          pip3 install requests argparse boto3

      - name: Set Up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.setup-job-environment.outputs.REGION }}

      - name: Mark Account with Underscore on Source
        run: |
          command_id=$(aws ssm send-command \
                --document-name "${{ needs.setup-job-environment.outputs.UNDERSCORE_DOCUMENT_NAME }}" \
                --targets Key=tag:aws:cloudformation:stack-name,Values=${{ inputs.SourceStackName }} \
                          Key=tag:role,Values=eventstore \
                --region ${{ needs.setup-job-environment.outputs.REGION }} \
                --parameters '{"accountIdsTxtFile":["account_ids.txt"], "s3BucketPath":["sk1-eventstore-eventstoreaccountmigrations3bucket-1nfyoh7zge59f/BulkAccountMigationTxtFile"]}' \
                --output text \
                --max-errors "100%" \
                --max-concurrency "100%" \
                --query "Command.CommandId")
          
          echo "SSM Command ID: $command_id"
          echo "SSM Run Command Link- https://${{ needs.setup-job-environment.outputs.REGION }}.console.aws.amazon.com/systems-manager/run-command/$command_id?region=${{ needs.setup-job-environment.outputs.REGION }}"
          python3 ./scripts/eventstore/check-ssm-output.py --region "${{ needs.setup-job-environment.outputs.REGION }}" --command-id "$command_id" --output "false"    


